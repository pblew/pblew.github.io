{"version":3,"sources":["webpack://lib_web_settlers/./src/widgets/testbed/TestBed.m.css","webpack://lib_web_settlers/./src/widgets/testbed/fragment.glsl","webpack://lib_web_settlers/./src/widgets/testbed/TestBed.tsx","webpack://lib_web_settlers/./src/widgets/testbed/vertex.glsl"],"names":["module","exports"," _key","root","factory","Object","vdom","properties","__webpack_exports__","onGLReady","classes","TestBed_m","GLPanel","fragmentSource","vertexSource"],"mappings":";;;;;;;;yIACAA,EAAAC,QAAA,CAAkBC,QAAA,uBAAAC,KAAA,yECDH,6BCWf,MAAMC,EAAUC,OAAAC,EAAA,EAAAD,GAASE,aAEVC,EAAA,QAAAJ,EAAQ,UAAkBG,WAAEA,IACvC,MAAME,UAAEA,GAAcF,IACtB,OACIF,OAAAC,EAAA,EADG,CACH,OAAKI,QAAS,CAACC,EAAA,OACXN,OAAAC,EAAA,EAAAD,CAACO,EAAA,EAAO,CAACC,eDjBN,qNCiBsCC,aCjBtC,obDiBkEL,UAAWA","file":"src/widgets/testbed/TestBed.bc3e47d9a0815e301305.bundle.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"web-settlers/TestBed\",\"root\":\"TestBed-m__root__2249f4FBjlN\"};","export default \"#version 300 es\\n\\nprecision mediump float;\\nprecision mediump int;\\n\\nflat in vec4 vColour;\\nout vec4 pixelColour;\\n\\nvoid main(void) {\\n    // return the provided pixel colour\\n    pixelColour = vColour;\\n}\\n\"","import fragmentSource from \"!!ts-shader-loader!./fragment.glsl\";\nimport vertexSource from \"!!ts-shader-loader!./vertex.glsl\";\nimport { create, tsx } from \"@dojo/framework/core/vdom\";\n\nimport GLPanel from \"../../dojo-gl/widgets/GLPanel\";\nimport * as css from \"./TestBed.m.css\";\n\nexport interface TestBedProperties {\n    onGLReady: (glPanel: GLPanel, data?: object) => void;\n}\n\nconst factory = create().properties<TestBedProperties>();\n\nexport default factory(function MapPanel({ properties }) {\n    const { onGLReady } = properties();\n    return (\n        <div classes={[css.root]}>\n            <GLPanel fragmentSource={fragmentSource} vertexSource={vertexSource} onGLReady={onGLReady} />\n        </div>\n    );\n});\n","export default \"#version 300 es\\n\\nprecision mediump float;\\nprecision mediump int;\\n\\nin vec3 vertexPos;\\nin vec4 vertexColour;\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nflat out vec4 vColour;\\n\\nvoid main(void) {\\n    // return the transformed and projected vertex value\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(vertexPos, 1.0);\\n    // output the vertexColour in vColour\\n    vColour = vertexColour;\\n}\\n\""],"sourceRoot":""}